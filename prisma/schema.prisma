generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("VIVILDLY_DATABASE_0_URL")
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdTime DateTime
  authorId    Int
  postId      Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post        Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  createdTime DateTime
  fromUserId  Int
  toUserId    Int
  fromUser    User     @relation("friend requester", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation("friend request reciever", fields: [toUserId], references: [id], onDelete: Cascade)
}

model Friendship {
  id               Int      @id @default(autoincrement())
  friendType       String
  isFavorite       Boolean  @default(false)
  lastReadPostTime DateTime
  lastReadPostId   Int?
  friendId         Int
  userId           Int
  friend           User     @relation("FriendedUser", fields: [friendId], references: [id], onDelete: Cascade)
  user             User     @relation("FriendUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id               Int       @id @default(autoincrement())
  authorId         Int
  content          Json[]
  createdTime      DateTime
  isUpdated        Boolean   @default(false)
  likedByIds       Int[]     @default([])
  updatedTime      DateTime
  commentsDisabled Boolean   @default(false)
  favoritesOnly    Boolean   @default(false)
  comments         Comment[] @relation("PostComments")
  author           User      @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
}

model Block {
  id            Int  @id @default(autoincrement())
  blockedUserId Int
  blockerId     Int
  blockedUser   User @relation("BlockedUser", fields: [blockedUserId], references: [id])
  blocker       User @relation("BlockUsers", fields: [blockerId], references: [id])
}

model AuthUser {
  id                    Int       @id @default(autoincrement())
  userId                Int       @unique
  password              String
  email                 String    @unique(map: "email_1")
  newEmail              String?   @unique(map: "email_2")
  emailVerified         Boolean   @default(false)
  verificationCode      String?
  verificationExpiresAt DateTime?
  resetCode             String?
  isAdmin               Boolean   @default(false)
  user                  User      @relation("AuthUser", fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  blockedWords String[] @default([])
  user         User     @relation("UserSettings", fields: [userId], references: [id])
}

model User {
  id                    Int             @id @default(autoincrement())
  bio                   String?         @default("")
  isDeactivated         Boolean         @default(false)
  name                  String
  avatarSrc             String          @default("https://i.ibb.co/CnxM4Hj/grid-0-2.jpg")
  url                   String?
  username              String          @unique(map: "username_1")
  authUser              AuthUser?       @relation("AuthUser")
  blocked               Block[]         @relation("BlockedUser")
  blockedBy             Block[]         @relation("BlockUsers")
  comments              Comment[]
  friendRequests        FriendRequest[] @relation("friend requester")
  friendRequestReciever FriendRequest[] @relation("friend request reciever")
  friends               Friendship[]    @relation("FriendedUser")
  friendOf              Friendship[]    @relation("FriendUser")
  sentNotifications     Notification[]  @relation("NotificationSender")
  notifications         Notification[]
  posts                 Post[]          @relation("PostAuthor")
  userSettings          UserSettings?   @relation("UserSettings")
  reports               Report[]        @relation("ReportUser")
}

model Waitlist {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  createdTime DateTime
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  createdTime DateTime
  body        Json
  isUnread    Boolean  @default(true)
  senderId    Int
  sender      User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id             Int      @id @default(autoincrement())
  createdTime    DateTime
  itemId         Int
  itemType       String
  reporterId     Int
  reporter      User     @relation("ReportUser", fields: [reporterId], references: [id], onDelete: Cascade)
  comment        String?
  reason         String
  resolved       Boolean  @default(false)
  resolvedReason String?
}
